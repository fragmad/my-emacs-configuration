; This is my emacs configuration file. It is a revised version of my original configuration that adds features that  I've started to use more and removes others that have fallen ;out of favour with me.

; Many of the configuration items are taken from Aaron Bedra's Emacs 24 Configuration which can be found here: http://www.aaronbedra.com/emacs.d/

; File created: 2014-03-29
; File last revised: 2014-09-06
; Changes: 8

; Set my name and email address.

(setq user-full-name "Will Ellwood")
(setq user-mail-address "fragmad@gmail.com")

; Set some environment variables. 

(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
(require 'cl)

; Make sure additional package repository is available.

(load "package")
(package-initialize)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(setq package-archive-enable-alist '(("melpa" deft magit)))

; list the default packages that I want available.

(defvar fragmad/packages '(ac-slime
                          auto-complete
                          autopair
                          clojure-mode
                          clojure-test-mode
                          cider
			  cyberpunk-theme
                          deft
                          gist
                          haskell-mode
			  helm
                          htmlize
                          magit
                          markdown-mode
                          marmalade
                          o-blog
                          org
                          paredit
                          puppet-mode
                          restclient
                          rvm
                          smex
                          sml-mode
                          wc-mode
                          yaml-mode
			  zenburn-theme)
  "Default packages")

; If the packages listed above aren't installed, install them.

(defun fragmad/packages-installed-p ()
  (loop for pkg in fragmad/packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (fragmad/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg fragmad/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))

; Skip the splash screen 

(setq inhibit-splash-screen t
      initial-scratch-message nil)

; Set a default mode. Not used at the moment, but available in case it is needed. 

(when (locate-library "org-mode")
  (setq initial-major-mode org-mode))

; Remove the scroll bar, tool bar, and menu bar. 

(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

; Make text highlighting and marking regions more intuitive

(delete-selection-mode t)
(transient-mark-mode t)
(setq x-select-enable-clipboard t)

; Change the way frame titles are displayed.

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

; Change the tab settings

(setq tab-width 2
      indent-tabs-mode nil)
      		     
; Disable backups

(setq make-backup-files nil)

; Make yes and no into one character

(defalias 'yes-or-no-p 'y-or-n-p)

; Some keybindings 

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

; Change the echo, dialog-box, visible and highlight parenthesis.  

(setq echo-keystrokes 0.1
      use-dialog-box nil
      visible-bell t)
(show-paren-mode t)


; Set my theme
; I usually use manoj-dark 
; Another option is wombat
; Or cyberpunk 
; Or, hopefully, zenburn.

(load-theme 'cyberpunk t) 

; Org Mode 

(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-log-done t)
(setq org-todo-keywords
      '((sequence "TODO" "INPROGRESS" "DONE")))
(setq org-todo-keyword-faces
      '(("INPROGRESS" . (:foreground "blue" :weight bold))))
(setq org-agenda-files (list "~/Dropbox/org/personal.org"))

; Deft 

(setq deft-directory "~/Dropbox/deft-notes")
(setq deft-use-filename-as-title t)
(setq deft-extension "org")
(setq deft-text-mode 'org-mode)

; Smex 

(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)

; Enable ido-mode

(ido-mode t)
(setq ido-enable-flex-matching t
      ido-use-virtual-buffers t)

; Turn on column numbers 

(setq column-number-mode t)

; Make temporary files go away

(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

; Make sure that brace structures (), [], {}, etc are closed as sooon as they are opened. 

(require 'autopair)


; Turn on auto-complete 

(require 'auto-complete-config)
(ac-config-default)

; Indentation and buffer cleanup

(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)

; Turn on flyspell

(setq flyspell-issue-welcome-flag nil)
(setq-default ispell-program-name "/usr/bin/aspell")
(setq-default ispell-list-command "list")

; Language hooks 

; C 

(add-hook 'c-mode-hook
          (lambda ()
          (autopair-mode)))

; Python 

(add-hook 'python-mode-hook
          (lambda ()
            (autopair-mode)))
; Ruby 

(add-hook 'ruby-mode-hook
          (lambda ()
          (autopair-mode)))

(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile" . ruby-mode))

; YAML 

(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
	     
; Markdown mode 

(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-hook 'markdown-mode-hook (lambda () (visual-line-mode t)))
(setq markdown-command "pandoc --smart -f markdown -t html")
;(setq markdown-css-path (expand-file-name "markdown.css" fragmad/vendor-dir))

; Other Modes

; Twitter Mode 

; Display the date and time in the modeline. 

(display-time-mode 1)

; Include wc-mode 

;(add-to-list 'load-path "~/Dropbox/Config/emacsConf/wc-mode/")
(require 'wc-mode)

;; Suggested setting
;(global-set-key "\C-cw" 'wc-mode)

; Full screen hack. This only works in Linux and X-Windows. Workout how to make this neater later. 

;; full screen toggle using command+[RET]

;; key bindings
(when (eq system-type 'gnu/linux) ;; mac specific settings
(defun toggle-fullscreen () 
  (interactive) 
  (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen) 
                                           nil 
                                           'fullboth)))
(global-set-key [(meta return)] 'toggle-fullscreen)
(global-set-key [(f11)] 'toggle-fullscreen)

  )

;Provide a C-c h shortcut to helm-mini

(global-set-key (kbd "C-c h") 'helm-mini)




